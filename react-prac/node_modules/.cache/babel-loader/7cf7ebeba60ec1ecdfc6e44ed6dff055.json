{"ast":null,"code":"var _jsxFileName = \"/home/andrew/Desktop/test/src/components/todolist.jsx\";\nimport React, { Component } from 'react';\nimport ToDoForm from \"./todoform\";\nimport Todo from \"./todo\";\n/*\n/*\n  TodoMVC\n  1. add todo\n  2. display todos\n  3. cross off todo\n  4. show number of active todos\n  5. filter all/active/complete\n  6. delete todo\n  7. delete all complete\n    7.1 only show if atleast one is complete\n  8. button to toggle all on/off\n*/\n\nclass TodoList extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      todos: [],\n      todoToShow: \"all\",\n      toggleAllComplete: true\n    };\n\n    this.addTodo = todo => {\n      //  cloning current state to do and adding(todo in function) todos\n      // in state\n      const newTodos = [todo, ...this.state.todos];\n      this.setState({\n        todos: newTodos\n      });\n    };\n\n    this.handletoggleComplete = id => {\n      this.setState({\n        todos: this.state.todos.map(todo => {\n          // suppose to update\n          if (todo.id === id) {\n            return {\n              id: todo.id,\n              text: todo.text,\n              complete: !todo.complete\n            };\n          } else {\n            return todo;\n          }\n        })\n      });\n    };\n\n    this.updatetodoToShow = string => {\n      this.setState({\n        todoToShow: string\n      });\n    };\n\n    this.handleDelete = id => {\n      this.setState({\n        todos: this.state.todos.filter(todo => {\n          return todo.id !== id;\n        })\n      });\n    };\n\n    this.removeAllComplete = () => {\n      this.setState({\n        todos: this.state.todos.filter(todo => {\n          // filter takes away so you want the not completes left.\n          return !todo.complete;\n        })\n      });\n    };\n  }\n\n  render() {\n    let todos = [];\n\n    if (this.state.todoToShow === \"all\") {\n      todos = this.state.todos;\n    } else if (this.state.todoToShow === \"active\") {\n      todos = this.state.todos.filter(todo => !todo.complete);\n    } else if (this.state.todoToShow === \"complete\") {\n      todos = this.state.todos.filter(todo => todo.complete);\n    }\n\n    const {\n      handletoggleComplete,\n      handleDelete,\n      removeAllComplete\n    } = this;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(ToDoForm, {\n      onSubmit: this.addTodo,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 13\n      }\n    }), todos.map(todo => /*#__PURE__*/React.createElement(Todo, {\n      key: todo.id // passing a functions down to the oncick of todo component.\n      ,\n      toggleComplete: () => handletoggleComplete(todo.id),\n      onDelete: () => handleDelete(todo.id),\n      todo: todo,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 17\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 13\n      }\n    }, \"todos left : \", this.state.todos.filter(todo => !todo.complete).length), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: () => this.updatetodoToShow('all'),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 17\n      }\n    }, \"all\"), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: () => this.updatetodoToShow('active'),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 17\n      }\n    }, \"active\"), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: () => this.updatetodoToShow('complete'),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 17\n      }\n    }, \"complete\"), this.state.todos.filter(todo => todo.complete).length ? /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 74\n      }\n    }, /*#__PURE__*/React.createElement(\"button\", {\n      onClick: removeAllComplete,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 17\n      }\n    }, \"remove all complete\")) : null, /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"button\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 17\n      }\n    })));\n  }\n\n}\n\nexport default TodoList;","map":{"version":3,"sources":["/home/andrew/Desktop/test/src/components/todolist.jsx"],"names":["React","Component","ToDoForm","Todo","TodoList","state","todos","todoToShow","toggleAllComplete","addTodo","todo","newTodos","setState","handletoggleComplete","id","map","text","complete","updatetodoToShow","string","handleDelete","filter","removeAllComplete","render","length"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport ToDoForm from \"./todoform\";\nimport Todo from \"./todo\";\n\n/*\n/*\n  TodoMVC\n  1. add todo\n  2. display todos\n  3. cross off todo\n  4. show number of active todos\n  5. filter all/active/complete\n  6. delete todo\n  7. delete all complete\n    7.1 only show if atleast one is complete\n  8. button to toggle all on/off\n*/\n\nclass TodoList extends Component {\n    state = { \n        todos:[],\n        todoToShow:\"all\",\n        toggleAllComplete: true\n     }\n\n     addTodo =(todo)=>{\n        //  cloning current state to do and adding(todo in function) todos\n        // in state\n         const newTodos  = [todo, ...this.state.todos];\n         this.setState({\n            todos: newTodos\n         })\n     }\n\n     handletoggleComplete=(id)=>{\n        this.setState({\n            todos: this.state.todos.map(todo=>{\n                // suppose to update\n                if(todo.id === id){\n                    return {\n                        id: todo.id,\n                        text: todo.text,\n                        complete: !todo.complete\n                    }\n                } else{\n                    return todo;\n                }\n            })\n        })\n     }\n\nupdatetodoToShow=(string)=>{\n    this.setState({\n    todoToShow :string\n    })\n}\n\nhandleDelete=(id)=>{\n    this.setState({\n        todos : this.state.todos.filter(todo => {\n            return todo.id !== id \n        })\n    })\n}\n\nremoveAllComplete=()=>{\n    this.setState({\n        todos : this.state.todos.filter(todo => {\n            // filter takes away so you want the not completes left.\n            return !todo.complete\n        })\n    })\n}\n\n render() { \nlet todos =[];\n\nif (this.state.todoToShow === \"all\") {\n    todos = this.state.todos;\n  } else if (this.state.todoToShow === \"active\") {\n    todos = this.state.todos.filter(todo => !todo.complete);\n  } else if (this.state.todoToShow === \"complete\") {\n    todos = this.state.todos.filter(todo => todo.complete);\n  }\n\n        const {handletoggleComplete, handleDelete, removeAllComplete} = this\n        return ( \n            <div>\n            <ToDoForm \n            onSubmit={this.addTodo}\n            />\n            {todos.map(todo=>(\n                <Todo key={todo.id} \n                // passing a functions down to the oncick of todo component.\n                toggleComplete={()=>handletoggleComplete(todo.id)}\n                onDelete= {()=>handleDelete(todo.id)}\n                todo={todo}\n                />\n            ))}\n            <div>\n                todos left : {this.state.todos.filter(todo => !todo.complete).length}\n            </div>\n                <button onClick={()=> this.updatetodoToShow('all')}>all</button>\n                <button onClick={()=> this.updatetodoToShow('active')}>active</button>\n                <button onClick={()=> this.updatetodoToShow('complete')}>complete</button>\n            { this.state.todos.filter( todo => todo.complete ).length ? (<div>\n                <button onClick={removeAllComplete}>remove all complete</button>\n            </div>\n            ) : null}\n            <div>\n                <button></button>\n            </div>\n            </div>\n           \n         );\n           \n            \n    }\n}\n \nexport default TodoList;"]},"metadata":{},"sourceType":"module"}