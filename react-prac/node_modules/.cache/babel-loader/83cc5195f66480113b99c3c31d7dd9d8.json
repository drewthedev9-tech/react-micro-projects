{"ast":null,"code":"var _jsxFileName = \"/home/andrew/Desktop/test/src/components/todolist.jsx\";\nimport React, { Component } from 'react';\nimport ToDoForm from \"./todoform\";\nimport Todo from \"./todo\";\n/*\n/*\n  TodoMVC\n  1. add todo\n  2. display todos\n  3. cross off todo\n  4. show number of active todos\n  5. filter all/active/complete\n  6. delete todo\n  7. delete all complete\n    7.1 only show if atleast one is complete\n  8. button to toggle all on/off\n*/\n\nclass TodoList extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      todos: []\n    };\n\n    this.addTodo = todo => {\n      //  cloning vurrent state to do and adding(todo oin function) todos\n      // in state\n      const newTodos = [todo, ...this.state.todos];\n      this.setState({\n        todos: newTodos\n      });\n    };\n  }\n\n  //  handletoggleComplete=(id)=>{\n  //     this.setState({\n  //         todos: this.state.todos.map(todo=>{\n  //             // suppose to update\n  //             if(todo.id === id){\n  //                 return {\n  //                     id: todo.id,\n  //                     text: todo.text,\n  //                     complete: !todo.complete\n  //                 }\n  //             } else{\n  //                 return todo;\n  //             }\n  //         })\n  //     })\n  //  }\n  render() {\n    const {\n      handletoggleComplete\n    } = this;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(ToDoForm, {\n      onSubmit: this.addTodo,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 13\n      }\n    }), this.state.todos.map(todo => /*#__PURE__*/React.createElement(Todo, {\n      key: todo.id,\n      toggleComplete: handletoggleComplete(todo.id),\n      text: todo.text,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 17\n      }\n    })));\n  }\n\n}\n\nexport default TodoList;","map":{"version":3,"sources":["/home/andrew/Desktop/test/src/components/todolist.jsx"],"names":["React","Component","ToDoForm","Todo","TodoList","state","todos","addTodo","todo","newTodos","setState","render","handletoggleComplete","map","id","text"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,QAAP,MAAqB,YAArB;AACA,OAAOC,IAAP,MAAiB,QAAjB;AAEA;;;;;;;;;;;;;;AAcA,MAAMC,QAAN,SAAuBH,SAAvB,CAAiC;AAAA;AAAA;AAAA,SAC7BI,KAD6B,GACrB;AACJC,MAAAA,KAAK,EAAC;AADF,KADqB;;AAAA,SAK5BC,OAL4B,GAKlBC,IAAD,IAAQ;AACd;AACA;AACC,YAAMC,QAAQ,GAAI,CAACD,IAAD,EAAO,GAAG,KAAKH,KAAL,CAAWC,KAArB,CAAlB;AACA,WAAKI,QAAL,CAAc;AACXJ,QAAAA,KAAK,EAAEG;AADI,OAAd;AAGH,KAZ2B;AAAA;;AAc7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAE,EAAAA,MAAM,GAAG;AACL,UAAM;AAACC,MAAAA;AAAD,QAAyB,IAA/B;AACA,wBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACA,oBAAC,QAAD;AACA,MAAA,QAAQ,EAAE,KAAKL,OADf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADA,EAIC,KAAKF,KAAL,CAAWC,KAAX,CAAiBO,GAAjB,CAAqBL,IAAI,iBACtB,oBAAC,IAAD;AAAM,MAAA,GAAG,EAAEA,IAAI,CAACM,EAAhB;AACA,MAAA,cAAc,EAAEF,oBAAoB,CAACJ,IAAI,CAACM,EAAN,CADpC;AAEA,MAAA,IAAI,EAAEN,IAAI,CAACO,IAFX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADH,CAJD,CADJ;AAgBH;;AAhD4B;;AAmDjC,eAAeX,QAAf","sourcesContent":["import React, { Component } from 'react';\nimport ToDoForm from \"./todoform\";\nimport Todo from \"./todo\";\n\n/*\n/*\n  TodoMVC\n  1. add todo\n  2. display todos\n  3. cross off todo\n  4. show number of active todos\n  5. filter all/active/complete\n  6. delete todo\n  7. delete all complete\n    7.1 only show if atleast one is complete\n  8. button to toggle all on/off\n*/\n\nclass TodoList extends Component {\n    state = { \n        todos:[]\n     }\n\n     addTodo =(todo)=>{\n        //  cloning vurrent state to do and adding(todo oin function) todos\n        // in state\n         const newTodos  = [todo, ...this.state.todos];\n         this.setState({\n            todos: newTodos\n         })\n     }\n\n    //  handletoggleComplete=(id)=>{\n    //     this.setState({\n    //         todos: this.state.todos.map(todo=>{\n    //             // suppose to update\n    //             if(todo.id === id){\n    //                 return {\n    //                     id: todo.id,\n    //                     text: todo.text,\n    //                     complete: !todo.complete\n    //                 }\n    //             } else{\n    //                 return todo;\n    //             }\n    //         })\n    //     })\n    //  }\n    render() { \n        const {handletoggleComplete} = this\n        return ( \n            <div>\n            <ToDoForm \n            onSubmit={this.addTodo}\n            />\n            {this.state.todos.map(todo=>(\n                <Todo key={todo.id} \n                toggleComplete={handletoggleComplete(todo.id)}\n                text={todo.text}\n                />\n        \n            ))}\n            </div>\n         );\n           \n            \n    }\n}\n \nexport default TodoList;"]},"metadata":{},"sourceType":"module"}